policy_module(karmorA, 1.0.0)

########################################

require {
    role unconfined_r;
    type unconfined_t, user_devpts_t;
}

type karmorA_t;
type karmorA_exec_t;

application_domain(karmorA_t, karmorA_exec_t)
role unconfined_r types karmorA_t;

unconfined_domtrans_to(karmorA_t, karmorA_exec_t)
#permissive karmorA_t;

allow karmorA_t karmorA_t:process { setpgid };
allow karmorA_t karmorA_exec_t:file { getattr execute execute_no_trans ioctl lock open read };

allow karmorA_t user_devpts_t:chr_file { getattr ioctl read write append };

########################################

require {
    type fs_t;
}

type karmorA_allow_t;

# A can execute B
allow karmorA_t karmorA_allow_t:file { getattr execute execute_no_trans ioctl lock open read write link unlink map };

# any others can execute B
allow unconfined_t karmorA_allow_t:file { getattr execute execute_no_trans ioctl lock open read write append link unlink relabelto relabelfrom map };
allow karmorA_allow_t fs_t:filesystem { associate };

########################################

type karmorA_read_t;
files_type(karmorA_read_t)

# A can read B, but A cannot write something in B
allow karmorA_t karmorA_read_t:file { getattr ioctl lock open read }; # -write, -append

type karmorA_file_t;
files_type(karmorA_file_t)

# A can access B
allow karmorA_t karmorA_file_t:file { getattr ioctl lock open read write append };

########################################

require {
    class dbus { acquire_svc send_msg };
    class context { contains translate };
    class passwd { chfn chsh crontab passwd rootok };
    class nscd { admin getgrp gethost getnetgrp getpwd getserv getstat shmemgrp shmemhost shmemnetgrp shmempwd shmemserv };

    class db_language { create drop execute getattr relabelfrom relabelto setattr implement };
    class db_database { access create drop get_param getattr install_module load_module relabelfrom relabelto set_param setattr };
    class db_procedure { create drop entrypoint execute getattr install relabelfrom relabelto setattr };
    class db_sequence { create drop get_value getattr next_value relabelfrom relabelto set_value setattr };
    class db_schema { add_name create drop getattr relabelfrom relabelto remove_name search setattr };
    class db_table { create delete drop getattr insert lock relabelfrom relabelto select setattr update };
    class db_blob { create drop export getattr import read relabelfrom relabelto setattr write };
    class db_column { create drop getattr insert relabelfrom relabelto select setattr update };
    class db_tuple { delete insert relabelfrom relabelto select update use };
    class db_view { create drop expand getattr relabelfrom relabelto setattr };

    class x_property { read };
    class x_event { receive send };
    class x_resource { read write };
    class x_extension { query use };
    class x_synthetic_event { receive send };
    class x_client { destroy getattr manage };
    class x_gc { create destroy getattr setattr use };
    class x_server { debug getattr grab manage record setattr };
    class x_cursor { create destroy getattr read setattr use write };
    class x_colormap { add_color create destroy getattr install read remove_color uninstall use write };
    class x_screen { getattr hide_cursor saver_getattr saver_hide saver_setattr saver_show setattr show_cursor };
    class x_device { add bell create destroy force_cursor freeze get_property getattr getfocus grab list_property manage read remove set_property setattr setfocus use write };
    class x_pointer { add bell create destroy force_cursor freeze get_property getattr getfocus grab list_property manage read remove set_property setattr setfocus use write };
    class x_keyboard { add bell create destroy force_cursor freeze get_property getattr getfocus grab list_property manage read remove set_property setattr setfocus use write };
    class x_drawable { add_child blend create destroy get_property getattr hide list_child list_property manage override read receive remove_child send set_property setattr show write };
}

